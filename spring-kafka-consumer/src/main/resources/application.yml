server:
  port: 8082

spring:
  application:
    name: consumer-application

  kafka:
    bootstrap-servers: localhost:9092

    consumer:
      group-id: my-consumer-group
      auto-offset-reset: earliest
      # Configures the Spring Kafka ErrorHandlingDeserializer that delegates to the 'real' deserializers
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      properties:
        # Tells Kafka / Schema Registry that we will be using a specific Avro type
        # otherwise Kafka will expect GenericRecord to be used on the topic.
        specific.avro.reader: true

    properties:
      schema.registry.url: http://localhost:8081

# Open up all Spring Boot Actuator endpoints
management:
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans

  tracing:
      sampling:
        probability: 1.0

  endpoints:
    web:
      exposure:
        include: "*"

  endpoint:
    health:
      show-details: always

  metrics:
    tags:
      application: ${spring.application.name}
      env: local


logging:
  level:
    root: info
    io.opentelemetry.exporter.zipkin: debug
    io.zipkin: debug

logging.pattern.level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
